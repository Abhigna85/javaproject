class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        char_set = set()  # Stores characters in the current window
        left = 0          # Left pointer of the sliding window
        max_length = 0    # Stores the maximum length found so far

        for right in range(len(s)):
            # While the current character is already in the set,
            # remove characters from the left end of the window
            # and advance the left pointer until the duplicate is removed.
            while s[right] in char_set:
                char_set.remove(s[left])
                left += 1
            
            # Add the current character to the set
            char_set.add(s[right])
            
            # Update the maximum length
            max_length = max(max_length, right - left + 1)
            
        return max_length
